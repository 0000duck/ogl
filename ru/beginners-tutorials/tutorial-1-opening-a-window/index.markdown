---
layout: page
status: publish
published: true
title: 'Урок 1: Открываем окно'
author:
  display_name: Calvin1602
  login: Calvin1602
  email: arnaud1602@gmail.com
  url: ''
author_login: Calvin1602
author_email: arnaud1602@gmail.com
wordpress_id: 1241
wordpress_url: http://www.opengl-tutorial.org/?page_id=1241
date: '2014-05-05 22:31:48 +0100'
date_gmt: '2014-05-05 22:31:48 +0100'
categories: []
tags: []
comments: []
language: ru
---
<h1>Введение<&#47;h1><br />
Добро пожаловать на первый урок!</p>
<p>Перед тем как перейти непосредственно к OpenGL вы узнаете как откомпилировать код, которым сопровождается каждый урок и как его запустить.</p>
<h1>Навыки<&#47;h1><br />
Чтобы работать с данными уроками вам не потребуется дополнительных навыков. Опыт в любом языке программирования (C, Java, Lisp, JavaScript и других) поможет вам лучше понимать суть, но вовсе не обязателен.</p>
<p>Все уроки написаны на "легком" C++ и мы потратили много усилий, чтобы сделать код настолько простым, насколько это вообще возможно. Здесь не будет шаблонов, классов и указателей, что позволит вам понять все, даже если вы знаете только Java.</p>
<h1>Забудьте все<&#47;h1><br />
Забудьте все, что вы знали об OpenGL ранее, если ваши знания касаются glBegin() и подобных функций. Здесь вы будете изучать новые стандарты OpenGL (OpenGL 3 и 4), в отличие от многих онлайн-уроков, в которых до сих пор рассматривается "старый" OpenGL (OpenGL 1 и 2).</p>
<h1>Компиляция исходного кода уроков<&#47;h1><br />
Весь исходный код к урокам может быть скомпилирован на таких платформах, как Windows, Linux, Mac. Общая процедура для всех этих платформ будет приблизительно одинакова:</p>
<ol>
<li><strong>Обновите драйверы!<&#47;strong> Обязательно сделайте это, если что мы вас предупреждали :)<&#47;li>
<li>Скачайте компилятор, если у вас его до сих пор нет.<&#47;li>
<li>Установите CMake<&#47;li>
<li>Скачайте исходный код урока<&#47;li>
<li>Создайте проект используя CMake<&#47;li>
<li>Скомпилируйте проект<&#47;li>
<li>Изменяйте его :)<&#47;li><br />
<&#47;ol><br />
Теперь рассмотрим процедуру подробнее для каждой платформы. Вполне возможно вам потребуется что-то адаптировать под ваши требования и возможности, для этого можете руководствоваться инструкцией для Windows.</p>
<h2>Компиляция в Windows<&#47;h2></p>
<ol>
<li>Обновление драйверов должно быть для вас легкой задачей. Все что вам нужно - это просто сходить на сайт NVidia или AMD, скачать оттуда драйверы и установить их. Если вдруг вы не знаете точно модель вашей видеокарты, то вы можете посмотреть ее в свойствах адаптера, для этого перейдите в Панель управления -> Система -> Диспетчер устройств -> Видео адаптер. Если у вас встроенный Intel GPU, то драйверы всегда поставляются в комплекте.<&#47;li>
<li>Мы предлагаем вам использовать Visual Studio 2010 Express в качестве среды, которую вы можете бесплатно скачать <a href="http:&#47;&#47;www.microsoft.com&#47;express&#47;Downloads&#47;#2010-Visual-CPP" target="_blank">здесь<&#47;a>. Если же вы захотите использовать MinGW, то мы рекомендуем вам <a href="http:&#47;&#47;qt-project.org&#47;">Qt Creator<&#47;a>. В любом случае, устанавливайте то, что вам необходимо и хотя шаги в уроках рассматриваются в Visual Studio, скорее всего различия в других IDE будут минимальны.<&#47;li>
<li>Скачайте <a href="http:&#47;&#47;www.cmake.org&#47;cmake&#47;resources&#47;software.html" target="_blank">CMake<&#47;a> и установите его.<&#47;li>
<li><a title="Download" href="&#47;?page_id=200" target="_blank">Скачайте исходный код<&#47;a>, распакуйте его к примеру в C:&#47;Users&#47;XYZ&#47;Projects&#47;OpenGLTutorials<&#47;li>
<li>Запустите CMake. В первом поле укажите путь к распакованной папке. Если сомневаетесь, то это та папка, где находится файл CMakeLists.txt. Во втором поле укажите папку, в которую будут записываться исполняемые файлы, например вы можете указать здесь C:&#47;Users&#47;XYZ&#47;Projects&#47;OpenGLTutorials-build-Visual2010-32bits или что-то подобное. К слову, эта папка может находиться где угодно.<a href="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;CMake.png"><img title="CMake" alt="" src="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;CMake.png" width="846" height="392" &#47;><&#47;a><&#47;li>
<li>Нажмите кнопку Configure. Так как вы впервые настраиваете проект CMake спросит вас, какой именно компилятор вы хотите использовать. Здесь все упирается в ваш инструментарий, который вы выбрали в шаге 2. Кстати, если у вас Windows 64-bit, то вы можете выбрать 64 разрядные компиляторы, но если вы не уверены, то используйте 32.<&#47;li>
<li>Нажимайте Configure до тех пор, пока не исчезнут все красные строки. Далее нажмите Generate. Теперь ваш Visual Studio проект создан и вы можете забыть про CMake. Можете даже удалить его, если хотите :)<&#47;li>
<li>Откройте в Visual Studio файл Tutorials.sln в папке, которую вы указывали во втором поле главного окна CMake (C:&#47;Users&#47;XYZ&#47;Projects&#47;OpenGLTutorials-build-Visual2010-32bits).<br />
<a href="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;directories.png"><img title="directories" alt="" src="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;directories.png" width="560" height="302" &#47;><&#47;a><br />
В меню Build нажмите Build All. Искходный код каждого урока и зависимостей будет откомпилирован. Также, каждый исполняемый файл будет скопирован обратно в C:&#47;Users&#47;XYZ&#47;Projects&#47;OpenGLTutorials . Надеемся у вас не возникнет ошибок.<br />
<a href="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;visual_2010.png"><img title="visual_2010" alt="" src="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;visual_2010-300x212.png" width="300" height="212" &#47;><&#47;a><&#47;li></p>
<li>Откройте C:&#47;Users&#47;XYZ&#47;Projects&#47;OpenGLTutorials&#47;playground и запустите playground.exe. Если все прошло гладко, то у вас должно появиться черное окно.<br />
<a href="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;empty_window.png"><img title="empty_window" alt="" src="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;empty_window-300x231.png" width="300" height="231" &#47;><&#47;a><&#47;li><br />
<&#47;ol><br />
Вы также можете запустить любой урок из Visual Studio. Для этого нажмите правой кнопной мыши на Playground и выберете "Choose as startup project". Для отладки используйте клавишу F5.</p>
<p><a href="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;WorkingDir.png"><img title="WorkingDir" alt="" src="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;WorkingDir-300x211.png" width="300" height="211" &#47;><&#47;a><a href="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2012&#47;04&#47;StartupProject.png"><img title="StartupProject" alt="" src="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2012&#47;04&#47;StartupProject-185x300.png" width="185" height="300" &#47;><&#47;a></p>
<h2>Компиляция в Linux<&#47;h2><br />
Существует большое количество разных дистрибутивов Linux и естественно рассмотреть особенности каждого дистрибутива выходит за рамки данного урока, поэтому не забудьте почитать документацию своего дистрибутива.</p>
<ol>
<li>Установите последние драйверы. Мы настоятельно рекомендуем вам использовать закрытые драйверу. Это не GNU, но они работают. Если ваш дистрибутив не предоставляет автоматической установки, можете попробовать посмотреть в документации к <a href="http:&#47;&#47;help.ubuntu.com&#47;community&#47;BinaryDriverHowto" target="_blank">Ubuntu<&#47;a><&#47;li>
<li>Установите все необходимые компиляторы, утилиты и библиотеки. Полный список выглядит так:
<ul>
<li>cmake<&#47;li>
<li>make<&#47;li>
<li>g++<&#47;li>
<li>libx11-dev<&#47;li>
<li>libxi-dev<&#47;li>
<li>libgl1-mesa-dev<&#47;li>
<li>libglu1-mesa-dev<&#47;li>
<li>libxrandr-dev<&#47;li>
<li>libext-dev<&#47;li><br />
<&#47;ul><br />
Используйте sudo apt-get install ***** или su &amp;&amp; yum install ******.<&#47;li></p>
<li><a title="Download" href="&#47;?page_id=200" target="_blank">Скачайте исходный код<&#47;a> и распакуйте его, к примеру в ~&#47;Projects&#47;OpenGLTutorials&#47;<&#47;li>
<li>Перейдите в ~&#47;Projects&#47;OpenGLTutorials&#47; и введите следующие команды:
<ul>
<li>mkdir build<&#47;li>
<li>cd build<&#47;li>
<li>cmake ..<&#47;li><br />
<&#47;ul><br />
<&#47;li></p>
<li>makefile будет создан в директории build<&#47;li>
<li>Выполните команду make all . Весь исходный код к урокам будет скомпилирован, а каждый исполняемый файл будет также скопирован в ~&#47;Projects&#47;OpenGLTutorials&#47;. Надеемся у вас не возникнет ошибок :)<&#47;li>
<li>Откройте ~&#47;Projects&#47;OpenGLTutorials&#47;playground и выполните .&#47;playground. Если все прошло гладко, то у вас должно появиться черное окно.<&#47;li><br />
<&#47;ol><br />
Обратите внимание, что лучшим решением будет использовать IDE, такую как Qt Creator. Она имеет поддержку CMake и предоставляет удобные инструменты для отладки. Инструкция для QtCreator:</p>
<ol>
<li>В QtCreator перейдите в меню File -> Tools -> Options -> Compile&amp;Execute -> CMake<&#47;li>
<li>Установите путь к CMake. Чаще всего это &#47;usr&#47;bin&#47;cmake<&#47;li>
<li>File -> Open Project и выберите tutorials&#47;CMakeLists.txt<&#47;li>
<li>Выберите директорию, в которую необходимо помещать скомпилированные файлы. Лучше всего выбрать директорию вне tutorials<&#47;li>
<li>Опционально установите -DCMAKE_BUILD_TYPE=Debug в Parameters и используйте Validate.<&#47;li>
<li>Нажмите на иконку молота внизу. Теперь уроки могут быть запущены из директории tutorials&#47;<&#47;li>
<li>Чтобы запускать уроки непосредственно из QtCreator, перейдите в Projects -> Execution parameters -> Working Directory и выберете директорию, в которой находятся шейдеры, текстуры и модели. К примеру для Урока 2 это будет: ~&#47;opengl-tutorial&#47;tutorial02_red_triangle&#47;<&#47;li><br />
<&#47;ol></p>
<h2>Компиляция в Mac<&#47;h2><br />
Mac OS не поддерживает OpenGL 3.3. Последние Маки с MacOS 10.7 Lion и совместимыми GPU могут работать с OpenGL 3.2, но не с 3.3. Поэтому используйте исходный код уроков для 2.1. В остальном процедура компиляции очень похожа на процедуру в Windows (Makefile также поддерживаются, но не будут рассматриваться):</p>
<ol>
<li>Установите XCode из Mac App Store<&#47;li>
<li><a href="http:&#47;&#47;www.cmake.org&#47;cmake&#47;resources&#47;software.html">Скачайте CMake<&#47;a> и установите .dmg . Нет необходимости устанавливать утилиты командной строки.<&#47;li>
<li><a title="Download" href="&#47;?page_id=200" target="_blank">Скачайте исходный код<&#47;a> (<strong>обязательно версия 2.1<&#47;strong>) и распакуйте его к примеру в ~&#47;Projects&#47;OpenGLTutorials&#47; .<&#47;li>
<li>Запустите CMake (Applications -> CMake). В первом поле ввода укажите путь к папке с распакованным исходным кодом уроков. Если сомневаетесь, то это папка, содержащая файл CMakeLists.txt. Во втором поле укажите где вы хотите сохранить исполняемые файлы. К примеру это может быть ~&#47;Projects&#47;OpenGLTutorials_bin_XCode&#47;. Обратите внимание, эта папка может находиться где угодно.<&#47;li>
<li>Нажмите на кнопку Configure. Так как вы используете конфигурацию впервые, то CMake спросит у вас какой компилятор вы хотите использовать. Выберете XCode.<&#47;li>
<li>Нажимайте Configure до тех пор, пока не исчезнут все красные строки. Нажмите Generate. Теперь проектный файл для XCode создан и вы можете забыть о CMake, и даже можете удалить его, если захотите.<&#47;li>
<li>Откройте ~&#47;Projects&#47;OpenGLTutorials_bin_XCode&#47; . Найдите и откройте файл Tutorials.xcodeproj<&#47;li>
<li>Выберете урок, который хотите запустить в XCode Scheme Panel и нажмите кнопку Run для компиляции и запуска<a href="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;Xcode-projectselection.png"><img title="Xcode-projectselection" alt="" src="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;Xcode-projectselection.png" width="826" height="330" &#47;><&#47;a><&#47;li><br />
<&#47;ol></p>
<h2>Внимание для пользователей Code::Blocks<&#47;h2><br />
Из-за 2 багов (один в C::B, один в CMake), вам необходимо изменить командную строку Project -> Build Options -> Make commands, как указано на скриншоте:</p>
<p><a href="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;CodeBlocksFix.png"><img title="CodeBlocksFix" alt="" src="http:&#47;&#47;www.opengl-tutorial.org&#47;wp-content&#47;uploads&#47;2011&#47;04&#47;CodeBlocksFix.png" width="746" height="340" &#47;><&#47;a></p>
<p>Вам также необходимо установить рабочую директорию: Project -> Properties -> Build targets -> tutorial N -> рабочая директория исполняемых файлов (это src_dir&#47;tutorial_N)</p>
<h1>Запуск уроков<&#47;h1><br />
Чтобы запустить исполняемый файл урока просто выполните двойной щелчок мышью на файле в нужной директории. Если вы предпочитаете командную строку, то не забудьте использовать команду cd, чтобы перейти в нужную директорию.</p>
<p>Если вы хотите запустить урок из IDE, То не забудьте прочитать инструкции, данные выше, чтобы установить корректную рабочую директорию.</p>
<h1>Как работать с уроками<&#47;h1><br />
К каждому уроку прилагается исходный код и все необходимые файлы данных, которые могут быть найдены в tutorialXX&#47;. Тем не менее вы вряд ли будете изменять эти проекты, так как они даются для справки. Лучшим решением будет открыть playground&#47;playground.cpp и изменять его так, как вам захочется. Если по каким-то причинам у вас его нет, то просто скопируйте код любого урока туда и все.</p>
<p>Мы предоставляем фрагменты кога в каждом уроке. Не стесняйтесь копировать эти фрагменты в playground, пока читаете и экспериментировать с ними - это хорошая практика, гораздо лучшая, чем просто читать готовый код или просто копировать его.</p>
<h1>Открываем окно<&#47;h1><br />
Наконец! Настало время кода OpenGL!</p>
<p>Хотя... Все уроки будут показывать вам низко-уровневый путь для тех или иных задач, таким образом вы будете видеть, что здесь нет никакой магии, однако открытие окна - задача скучная, поэтому мы будем использовать внешнюю библиотеку GLFW для этой работы. Если вы хотите сделать это сами, то вам необходимо использовать Win32 API в ОС Windows, X11 API в Linux, Cocoa API в Mac. Также вы можете использовать другие библиотеки, такие как: SFML, FreeGLUT, SDL и подобные (см. страницу <a title="Useful Tools &amp; Links" href="&#47;?page_id=210" target="_blank">Ссылки<&#47;a>).</p>
<p>Итак, поехали! Первое что мы делаем - это разбираемся с зависимостями. Нам необходимо базовый функционал для вывода в консоль:</p>
<pre class="brush: cpp">&#47;&#47; Включаем стандартные заголовки<br />
#include <stdio.h><br />
#include <stdlib.h><&#47;pre><br />
Далее нам необходим GLEW. Здесь есть немного магии, но перейдем к пояснениям позднее.</p>
<pre class="brush: cpp">&#47;&#47; Включаем GLEW. Всегда включайте его ДО gl.h и glfw.h<br />
#include <GL&#47;glew.h><&#47;pre><br />
Мы будем использовать GLFW для обработки окна и клавиатуры, так что включаем его тоже.</p>
<pre class="brush: cpp">&#47;&#47; Включаем GLFW<br />
#include <GL&#47;glfw3.h><&#47;pre><br />
Следующий заголовок не является необходимым в данный момент, так как является библиотекой трехмерной математики, но позже будет очень полезен. В нем нет никакой магии и если вы знаете математику, то вполне можете написать свой аналог. Что касается "using namespace glm", то эта строка переводит пространство имен в glm, чтобы можно было писать "vec3", вместо "glm::vec3".</p>
<pre class="brush: cpp">&#47;&#47; Включаем GLM<br />
#include <glm&#47;glm.hpp><br />
using namespace glm;<&#47;pre><br />
Если вы скопировали код представленный выше в playground.cpp, то компилятор предупредит вас, что нет функции main(), поэтому добавим ее:</p>
<pre class="brush: cpp">int main(){<&#47;pre><br />
В теле функции первым делом инициализируем GLFW:</p>
<pre class="brush: cpp">&#47;&#47; Инициализируем GLFW<br />
if( !glfwInit() )<br />
{<br />
    fprintf( stderr, "Ошибка при инициализации GLFWn" );<br />
    return -1;<br />
}<&#47;pre><br />
Теперь мы можем создать наше первое OpenGL окно! :)</p>
<pre class="brush: cpp">glfwWindowHint(GLFW_FSAA_SAMPLES, 4); &#47;&#47; 4x Сглаживание<br />
glfwWindowHint(GLFW_OPENGL_VERSION_MAJOR, 3); &#47;&#47; Мы хотим использовать OpenGL 3.3<br />
glfwWindowHint(GLFW_OPENGL_VERSION_MINOR, 3);<br />
glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); &#47;&#47; Мы не хотим старый OpenGL</p>
<p>&#47;&#47; Открыть окно и создать в нем контекст OpenGL<br />
GLFWwindow* window; &#47;&#47; (В сопроводительном исходном коде эта переменная является глобальной)<br />
window = glfwCreateWindow( 1024, 768, "Tutorial 01", NULL, NULL);<br />
if( window == NULL ){<br />
	fprintf( stderr, "Невозможно открыть окно GLFW. Если у вас Intel GPU, то он не поддерживает версию 3.3. Попробуйте версию уроков для OpenGL 2.1.n" );<br />
	glfwTerminate();<br />
	return -1;<br />
}<br />
glfwMakeContextCurrent(window);</p>
<p>&#47;&#47; Инициализируем GLEW<br />
glewExperimental=true; &#47;&#47; Флаг необходим в Core-режиме OpenGL<br />
if (glewInit() != GLEW_OK) {<br />
    fprintf(stderr, "Невозможно инициализировать GLEWn");<br />
    return -1;<br />
}<&#47;pre><br />
Скомпилируйте и запустите этот исходный код. Если все сделано правильно, то у вас откроется и тут же закроется окно с контекстом OpenGL и это правильно, так как мы не указали, что хотим ждать до тех пор, пока пользователь не нажмет клавишу Escape. Самое время сделать это:</p>
<pre class="brush: cpp">&#47;&#47; Включим режим отслеживания нажатия клавиш, для проверки ниже<br />
glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);</p>
<p>do{<br />
    &#47;&#47; Пока что ничего не выводим. Это будет в уроке 2.</p>
<p>    &#47;&#47; Сбрасываем буферы<br />
    glfwSwapBuffers(window);<br />
    glfwPollEvents();</p>
<p>} &#47;&#47; Проверяем нажатие клавиши Escape или закрытие окна<br />
while( glfwGetKey(window, GLFW_KEY_ESCAPE ) != GLFW_PRESS &amp;&amp;<br />
glfwWindowShouldClose(window) == 0 );<&#47;pre><br />
И это завершает наш первый урок! Во втором уроке мы узнаем как выводить простейший треугольник. Увидимся :)</p>
